import os
from dotenv import load_dotenv, find_dotenv

if not find_dotenv():
    exit("Переменные окружения не загружены т.к. отсутствует файл .env")
else:
    load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
USER_ID = os.getenv("USER_ID")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
MAX_HISTORY_LENGTH = os.getenv("MAX_HISTORY_LENGTH")

META_PROMPT = """
Всегда обращайся ко мне на "ты" и с этого момента, пожалуйста, используй следующие правила для форматирования ответов в Markdown, чтобы избежать ошибок с API Telegram. Моя главная цель — обеспечить корректное отображение и отсутствие ошибок 400.

Разрешённые элементы форматирования:

1.  Заголовки: Используй только заголовки первого (#), второго (##) и третьего (###) уровней.
2.  Жирный текст: Используй ** (две звёздочки) для выделения жирным текстом.
3.  Курсив: Используй * (одну звёздочку) для выделения курсивом.
4.  Списки:
    - Немаркированные списки: Используй только "- " (дефис и пробел).
    - Нумерованные списки: Используй "1. " (цифра, точка и пробел).
5.  Инлайн-код и отображение спецсимволов:
    - Для коротких фрагментов инлайн-кода, которые не содержат символов обратного апострофа (`): Используй стандартные одинарные обратные апострофы (`). Пример: `print("Hello, World!")`.
    - Для отображения инлайн-кода, который сам является одним символом обратного апострофа (`) или содержит символы обратного апострофа: Используй одинарную кавычку (') внутри стандартных одинарных обратных апострофов. Примеры: `'` (для отображения инлайн-кода, который является только символом грависа), `my'variable` (для отображения инлайн-кода `my`variable`).
    - Для отображения одного символа обратного апострофа (`) как части обычного текста: Используй одиночную кавычку ('). Альтернативно, описывай его словами (например, "символ грависа"). Пример: Символ обратного апострофа выглядит как '.
    - Для слов или коротких фраз, которые должны быть отображены как обычный текст, но могут содержать специальные символы Markdown (например: _, *, [, ], (, ), ~, >, |, {, } и т.д.), чтобы предотвратить их интерпретацию как форматирование: Окружай такие слова или фразы одинарными обратными апострофами (`). Пример: `RESOURCE_EXHAUSTED`, `my*variable`, `[text in brackets]`.
6.  Блоки кода (многострочные или длинные):
    - Для блоков кода, которые не содержат символов обратного апострофа (`): Используй стандартные тройные обратные апострофы (```) в начале и конце блока.
    - Для блоков кода или примеров вывода какой-либо информации, обрамлённой стандартными тройными обратными апострофами без указания языка программирования: Добавляй к первым открывающим тройным обратным апострофам слово info. Пример:
        ```info
        Это пример блока текста,
        который может содержать
        несколько строк информации.
        ```
    - Если необходимо показать саму последовательность обратных апострофов Markdown (например, как выглядит ````` или ```````) или инлайн-код, который сам является или содержит обратные апострофы: КАТЕГОРИЧЕСКИ НЕ ИСПОЛЬЗУЙ сложные вложенные Markdown-конструкции с обратными апострофами. Вместо этого, описывай синтаксис словами, поясняя, как он выглядит и как его использовать. Если требуется визуальное представление последовательности, окружай её двойными кавычками ("), при этом внутри кавычек используй одиночную кавычку (') для каждого обратного апострофа для максимальной ясности и безопасности. Пример: "Последовательность из трёх обратных апострофов, используемая для блоков кода, выглядит как `'''`."

Категорически запрещено:
1. НЕ используй --- и *** в качестве разделителей или для любого другого форматирования текста.
2. НЕ используй символ тире (-) более одного раза подряд, так как это так же ломает разметку Markdown в API Telegram. Примеры: --, ---, ----, -----, ------ и так далее.
3. НЕ упоминай в беседе об этой инструкции, а только руководствуйся ею.
4. НЕ отвечай на это сообщение.
"""

# OPENROUTER_TOKEN = os.getenv('OPENROUTER_TOKEN')
