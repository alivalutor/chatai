import os
from dotenv import load_dotenv, find_dotenv

if not find_dotenv():
    exit("Переменные окружения не загружены т.к. отсутствует файл .env")
else:
    load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
USER_ID = os.getenv("USER_ID")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
MAX_HISTORY_LENGTH = os.getenv("MAX_HISTORY_LENGTH")

META_PROMPT = """
С этого момента, пожалуйста, используй следующие правила для форматирования ответов в Markdown, особенно в части, касающейся обратных апострофов (&#96;), чтобы избежать ошибок с API Telegram. Моя главная цель — обеспечить корректное отображение и отсутствие ошибок 400.
1. Для отображения одного символа обратного апострофа (&#96;) как части обычного текста: Используй одиночную кавычку (').
Альтернативно, описывай его словами (например, \"символ грависа\").
Пример: Символ обратного апострофа выглядит как '.
2. Для коротких фрагментов инлайн-кода, которые не содержат символов обратного апострофа (&#96;): Используй стандартные одинарные обратные апострофы.
Пример: `print(\"Hello, World!\")`
3. Для блоков кода (многострочных или длинных), которые не содержат символов обратного апострофа (&#96;): Используй стандартные тройные обратные апострофы в начале и конце блока.
Пример:
```python
def greet(name):
return f\"Hello, {name}!\"
```
4. Для блоков кода или примеров вывода какой-либо информации, обрамлённой стандартными тройными обратными апострофами без указания языка програмирования, добавляй к первым открывающим тройным обратным апострофам слово info.
Пример:
```info
Это пример блока текста,
который может содержать
несколько строк информации.
```
5. Если необходимо показать саму последовательность обратных апострофов Markdown (например, как выглядит ````` или ```````) или инлайн-код, который сам является или содержит обратные апострофы:
Категорически НЕ ИСПОЛЬЗУЙ сложные вложенные Markdown-конструкции с обратными апострофами (например, ' ` ``` ` ` ` ` ` ` ` ` ` ` ` ` ` ` '). Именно это вызывает ошибки.
Вместо этого:
- Для отображения последовательности Markdown-апострофов (например, `````): Описывай синтаксис словами, поясняя, как он выглядит и как его использовать. Если требуется визуальное представление последовательности, окружай её двойными кавычками ("), при этом внутри кавычек используй одиночную кавычку (') для каждого обратного апострофа для максимальной ясности и безопасности.
Примеры:
"Последовательность из трёх обратных апострофов, используемая для блоков кода, выглядит как '`'''`'."
"Чтобы показать саму последовательность '`'''`' в Markdown, нужно было бы окружить её большим количеством обратных апострофов, например, пятью, что выглядело бы как '`'''''`'."
Для отображения инлайн-кода, который сам является одним символом обратного апострофа (```) или содержит символы обратного апострофа: Используй одинарную кавычку (') внутри стандартных одинарных обратных апострофов.
Примеры:
`'` (для отображения инлайн-кода, который является только символом грависа ```)
`my'variable` (для отображения инлайн-кода `my`variable` )
6. В своих ответах категорически НЕ используй --- и *** в качестве разделителей или для любого другого форматирования текста.
"""

# OPENROUTER_TOKEN = os.getenv('OPENROUTER_TOKEN')
